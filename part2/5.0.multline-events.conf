input {
  file{
    path => "C:/Users/Satya Ganesh/Documents/ElasticSearch/logstash-7.16.2/config/pipelines/datasets/access/apache*.log"
    start_position => "beginning"
  }
  file{
    path => "C:/Users/Satya Ganesh/Documents/ElasticSearch/logstash-7.16.2/config/pipelines/datasets/java_errors.log"
    start_position => "beginning"
    codec => multiline{
      pattern => "%{CATALINA_DATESTAMP}"
      what => "previous"
      negate => true
      auto_flush_interval => 5
    }
  }
}

filter {
  if [headers][request_path] =~ "error" or [path] =~ "errors" {
    mutate {
      replace => { type => "error" }
    }

    grok {
      match => {"message" => "%{CATALINA_DATESTAMP} %{LOGLEVEL:log-type} %{JAVACLASS:class}: (?<msg>.+?(?=\n))"}
    }

  } else {
    mutate {
      replace => { type => "access" }
    }

    grok {
      match => { "message" => '%{HTTPD_COMMONLOG} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:agent}"' }
    }

    if "_grokparsefailure" in [tags] {
      drop { }
    }

    useragent {
      source => "agent"
      target => "ua"
    }

    # Admin pages
    if [request] =~ /^\/admin\// {
      drop { }
    }

    # Static files
    if [request] =~ /^\/js\//
      or [request] =~ /^\/css\//
      or [request] in ["/robots.txt", "/favicon.ico"] {
      drop { }
    }

    # Crawlers
    if [ua][device] == "Spider" {
      drop { }
    }

    mutate {
      convert => {
        "response" => "integer"
        "bytes" => "integer"
      }
    }

    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      remove_field => [ "timestamp" ]
    }

    geoip {
      source => "clientip"
    }
  }

  mutate {
    remove_field => [ "headers", "@version", "host" ]
  }
}

output {
  if [type] == "access" {
    elasticsearch {
      hosts => ["localhost:9200"]

      #index => "%{type}-%{+YYYY.MM.dd}"
      http_compression => true
    }
  } else {
    stdout {
      codec => rubydebug
    }
  }
}
